using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Dax.Template.Interfaces;
using Dax.Template.Tables.Dates;
using Dax.Template.Enums;
using System.IO;
using Json.Schema.Generation;

namespace Dax.Template.Tables
{

    public class TemplateConfiguration: IScanConfig, IDateTemplateConfig, IMeasureTemplateConfig, IHolidaysConfig, ICustomTableConfig, ITemplates, ILocalization
    {
        [JsonIgnore]
        public string? TemplateUri { get; set; }

        [Description("Name of the template configuration.")]
        public string? Name { get; set; }

        [Description("Description of the template configuration.")]
        public string? Description { get; set; }

        // ITemplates implementation
        [Description("List of templates to execute in this configuration.")]
        [Required]
        public ITemplates.TemplateEntry[]? Templates { get; set; }

        // ILocalization implementation
        [Description("Specifies the ISO translation (like “en-US”). If null, it does not apply a translation to the template.")]
        public string? IsoTranslation { get; set; }

        [Description("Specifies the ISO code for the international format applied to the DAX template placeholder @@GETISO.")]
        /// <summary>
        /// If IsoFormat is null, there is not localization in FORMAT functions and the model language is used.
        /// If IsoFormat is not null, it corresponds to the third argument of FORMAT functions used to generate formatted strings.
        /// </summary>
        public string? IsoFormat { get; set; }

        [Description("List of localization files. Each localization file corresponds to a TranslationDefinition object.")]
        public string[]? LocalizationFiles { get; set; }

        // IScanConfig implementation
        [Description("List of tables and columns to include in the scan. If not specified, all the model columns are included by default if the SelectedTablesColumns AutoScan setting is active.")]
        public string[]? OnlyTablesColumns { get; set; }
        
        
        [Description("List of tables and columns to be excluded in the scan. This setting is used on when the SelectedTablesColumns AutoScan setting is active.")]
        public string[]? ExceptTablesColumns { get; set; }

        [Description("Defines the automatic scan to find the date range for a date table. Multiple settings can be active at the same time.")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AutoScanEnum? AutoScan { get; set; }

        // IDateTemplateConfig implementation
        [Description("If defined, it is the minimum value for the first year generated in the Date table. If the year found by the automatic scan is less than FirstYearMin, then the Date table will start from the FirstYearMin year.")]
        [Nullable(true)]
        public int? FirstYearMin { get; set; }

        [Description("If defined, it is the maximum value for the first year generated in the Date table. If the year found by the automatic scan is greater than FirstYearMax, then the Date table will start from the FirstYearMax year.")]
        [Nullable(true)] 
        public int? FirstYearMax { get; set; }

        [Description("If defined, it is the minimum value for the last year generated in the Date table. If the year found by the automatic scan is less than LastYearMin, then the Date table will start from the LastYearMin year.")]
        [Nullable(true)]
        public int? LastYearMin { get; set; }

        [Description("If defined, it is the maximum value for the first year generated in the Date table. If the year found by the automatic scan is greater than LastYearMax, then the Date table will start from the LastYearMax year.")]
        [Nullable(true)]
        public int? LastYearMax { get; set; }

        [Description("Used by Bravo simplified configuration and ignored by Dax Template. If defined it should be the value applied also to FirstYearMin and FirstYearMax.")]
        [Nullable(true)]
        public int? FirstYear { get; set; }

        [Description("Used by Bravo simplified configuration and ignored by Dax Template. If defined it should be the value applied also to LastYearMin and LastYearMax.")]
        [Nullable(true)]
        public int? LastYear { get; set; }

        // ICustomTableConfig implementation
        [Description("Specify a list of dictionary entries that define the default value assigned to global variable in the template. These values override the expression assigned to a global variable in the template.")]
        public Dictionary<string, string> DefaultVariables { get; set; } = new();

        // IHolidaysConfig implementation
        [Description("Two-letter ISO code of the country to use. The holidays are retrieved for a single country from the HolidaysDefinition table.")]
        public string? IsoCountry { get; set; }

        [Description("Prefix of holiday name generated by “in lieu of” algorithm.")]
        public string? InLieuOfPrefix { get; set; }

        [Description("Suffix of holiday name generated by “in lieu of” algorithm.")]
        public string? InLieuOfSuffix { get; set; }

        [Description("Name of the table generated by the HolidaysDefinition template containing the definition of the holidays for the supported countries.")]
        public string? HolidaysDefinitionTable { get; set; }

        [Description("String expression that returns a DAX table with one column and as many rows as the number of working days. The weekdays are expressed by integer numbers where Sunday is 0. For example, to specify Monday to Friday as working days use the following table constructor: { 2, 3, 4, 5, 6 }")]
        public string? WorkingDays { get; set; }

        [Description("Configuration for holidays used to create working and non-working days in the Date table.")]
        public HolidaysConfig? HolidaysReference { get; set; }

        // IMeasureTemplateConfig implementation
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("Specifies how to create the name of measures generated by the template.")]
        public AutoNamingEnum? AutoNaming { get; set; }

        [Description("Separator between prefix and measure name or measure name and suffix for the measures generated by the measure template.")]
        public string? AutoNamingSeparator { get; set; }

        [Description("Array of objects where each item has the following properties.")]
        public IMeasureTemplateConfig.TargetMeasure[]? TargetMeasures { get; set; }

        [Description("If defined, creates all the measures generated by the measure template into the table specified.")]
        public string? TableSingleInstanceMeasures { get; set; }
    }

    public static class TemplateConfigurationExtensions
    {
        public static string ToTemplateUri(this FileInfo file)
        {
            var uriBuilder = new UriBuilder(file.FullName)
            {
                Scheme = Uri.UriSchemeFile
            };
            
            return uriBuilder.Uri.AbsoluteUri;
        }
    }
}
